// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native"]
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?        @db.Text
    accounts      Account[]
    sessions      Session[]
    Publications  Publication[]
    Subscriptions Subscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Item {
    id                      Int         @id @default(autoincrement())
    createdAt               DateTime    @default(now())
    name                    String
    description             String      @db.Text
    front                   String      @db.Text
    back                    String      @db.Text
    status                  Status      @default(DRAFT)
    stripeProductId         String      @unique
    stripePaymentLinkId     String      @unique
    stripePaymentLink       String      @db.Text
    postcardPreviewId       String      @unique
    postcardPreviewRendered Boolean?
    frontPreview            String      @db.Text
    backPreview             String      @db.Text
    publicationId           Int
    publication             Publication @relation(fields: [publicationId], references: [id])
    test                    Boolean     @default(false)
}

model Publication {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    name          String
    description   String         @db.Text
    imageUrl      String         @db.Text
    author        User           @relation(fields: [authorId], references: [id])
    authorId      String
    status        Status         @default(DRAFT)
    Items         Item[]
    Subscriptions Subscription[]
    test          Boolean        @default(false)
}

model Subscription {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    publicationId Int
    publication   Publication @relation(fields: [publicationId], references: [id])
    subscriberId  String
    subscriber    User        @relation(fields: [subscriberId], references: [id])
}

enum Status {
    DELETED
    DRAFT
    PUBLISHED
}

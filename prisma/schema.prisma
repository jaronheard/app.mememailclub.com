generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?        @db.Text
  accounts      Account[]
  sessions      Session[]
  Publications  Publication[]
  Subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id                      Int         @id @default(autoincrement())
  createdAt               DateTime    @default(now())
  name                    String
  description             String      @db.Text
  front                   String      @db.Text
  back                    String      @db.Text
  status                  ItemStatus  @default(DRAFT)
  stripeProductId         String      @unique
  stripePaymentLinkId     String      @unique
  stripePaymentLink       String      @db.Text
  postcardPreviewId       String      @unique
  postcardPreviewRendered Boolean?
  frontPreview            String      @db.Text
  backPreview             String      @db.Text
  publicationId           Int
  publication             Publication @relation(fields: [publicationId], references: [id])
  test                    Boolean     @default(false)
  size                    ItemSize    @default(sz_4x6)
}

model Publication {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  name          String
  description   String            @db.Text
  imageUrl      String            @db.Text
  author        User              @relation(fields: [authorId], references: [id])
  authorId      String
  status        PublicationStatus @default(DRAFT)
  Items         Item[]
  Subscriptions Subscription[]
  test          Boolean           @default(false)
}

model Subscription {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  publicationId Int
  publication   Publication @relation(fields: [publicationId], references: [id])
  subscriberId  String
  subscriber    User        @relation(fields: [subscriberId], references: [id])
}

enum ItemStatus {
  DELETED
  DRAFT
  PUBLISHED
}

enum PublicationStatus {
  DELETED
  DRAFT
  PUBLISHED
}

enum ItemSize {
  sz_4x6
  sz_6x9
  sz_9x11
}
